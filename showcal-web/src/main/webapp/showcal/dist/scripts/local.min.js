var initApp=function(){
    "use strict";
    var ref = [
        "xn.directive.common",
        "xn.filter.common",
        "xn.service.common",
        "xn.service.foundation",
        "xn.service.interceptor",
        "xn.showcal.cms",
        "sc.showcal.welcome",
        "sc.showcal.myuser",
        "sc.showcal.md",
        "sc.showcal.repository",
        "xn.showcal.index",
        "xn.showcal.filter",
        "xn.showcal.service",
        "xn.showcal.historymsg",
        "ui.bootstrap",
        "xn.directive.navigation",
        "xn.directive.loading",
        "xn.directive.attachment",
        "xn.directive.select",
        "xn.directive.form",
        "xn.markdown",
        "ngSanitize"
    ];

    var app =angular.module("xn", ref);

    app.config(["$httpProvider", function ($httpProvider) {
        $httpProvider.interceptors.push("httpInterceptor");
    }]);
// 全局配置 form提交验证
    app.config(["xnValidatorProvider", function (xnValidatorProvider) {
        // 全局配置
        xnValidatorProvider.config({
            blurTrig   : false,
            showError  : false,
            removeError: false
        });
        xnValidatorProvider.setRules({
            description: {
                minLength: "字数太少！"
            },
            title: {
                required: "帖子名称不能为空！"
            },
            weight: {
                required: "权重不能为空！"
            }
        });
    }]);
    app.controller("BodyController",["$scope","dialogService", function($scope,dialogService) {
        //关闭错误
        $scope.closeAlert = function (index,form) {
            form.splice(index,1);
        };
        $scope.$on('navShow', function(event, data) {
            $scope.navShow = data;
        });
        $scope.maxPageSize=5;

        $scope.loginout = function () {
            var dialogDefaults = {
                size: "sm"
            };
            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定注销",
                headerText: "继续....?",
                bodyText: "您确定要注销吗？",
                callback: function () {
                    window.location.href="/loginout";
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };

    }]);
};
(function () {
    "use strict";
    angular.module("xn.showcal.filter", [])
        .filter("memberType", [
            function () {
                return function (input) {
                    var type = "";
                    switch (input) {
                        case 'SENIOR':
                            type = "高级会员";
                            break;
                        case 'STANDARD':
                            type = "普通会员";
                            break;
                    }
                    return type;
                };
            }
        ])
        .filter("statusType", [
            function () {
                return function (input) {
                    var status = "";
                    var inputData = "";
                    switch (inputData) {
                        case "false":
                            status = "未发布";
                            break;
                        case "true":
                            status = "已发布";
                            break;

                    }
                    return status;
                };
            }
        ])
        .filter("isActive", [
            function () {
                return function (input) {
                    var status = "";
                    switch (input) {
                        case false:
                            status = "未发布";
                            break;
                        case true:
                            status = "已发布";
                            break;

                    }
                    return status;
                };
            }
        ])
        .filter("timeReturnFormat", [
            function () {
                return function (input) {

                    if (input) {
                        if (input.indexOf(" ") == 10) {
                            var time;
                            time = input.substr(0, 10) + "\r\n" + input.substr(11, 5);
                            return time;
                        } else {
                            input = Number(input);
                            return input ? moment(input).format("YYYY-MM-DD") + "\r\n" + moment(input).format("HH:mm") : "";
                        }
                    } else {
                        return;
                    }

                };
            }
        ])
        .filter("sexType", [
            function () {
                return function (input) {
                    var type = "未知";
                    switch (input) {
                        case 'FEMALE':
                            type = "女";
                            break;
                        case 'MALE':
                            type = "男";
                            break;
                    }
                    return type;
                };
            }
        ])
        .filter("serviceState", [
            function () {
                return function (input) {
                    var status = "";
                    switch (input) {
                        case false:
                            status = "历史服务";
                            break;
                        case true:
                            status = "正在服务";
                            break;

                    }
                    return status;
                };
            }
        ])
        .filter("welcomeActive", [
            function () {
                return function (input) {
                    var status = "";
                    switch (input) {
                        case false:
                            status = "非默认";
                            break;
                        case true:
                            status = "默认";
                            break;

                    }
                    return status;
                };
            }
        ])
        .filter("sexType", [
            function () {
                return function (input) {
                    var type = "";
                    switch (input) {
                        case 'FEMALE':
                            type = "女";
                            break;
                        case 'MALE':
                            type = "男";
                            break;
                    }
                    return type;
                };
            }
        ])
        .filter("serviceState", [
            function () {
                return function (input) {
                    var status = "";
                    switch (input) {
                        case false:
                            status = "历史服务";
                            break;
                        case true:
                            status = "正在服务";
                            break;

                    }
                    return status;
                };
            }
        ])
        .filter('trustHtml', function ($sce) {
            return function (input,keyword) {
                console.log("--->"+keyword);
                return $sce.trustAsHtml(input);
            }
        });
})();
(function () {
    "use strict";
    angular.module("xn.showcal.service", [])
        .factory('ShowcalService', ['$http', function ($http) {
            var service = {};
            var url = "/service/api.do";
            service.createWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.create"}});
            };
            service.getWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.get"}});
            };
            service.updateWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.update"}});
            };
            service.deleteWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.delete"}});
            };
            service.inactiveWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.inactive"}});
            };
            service.activeWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.active"}});
            };
            service.getMyWelComeList = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myWelComeList.get"}});
            };
            service.getMyShowCalWelCome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myshowcalwelcome.get"}});
            };
            service.createServiceUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.serviceUser.create"}});
            };
            service.deleteServiceUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.serviceUser.delete"}});
            };
            service.getMyServiceUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myServiceUser.get"}});
            };
            service.getMyHistoryServiceUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myHistoryServiceUser.get"}});
            };
            service.getMyShowCal = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myShowCal.get"}});
            };
            service.getMyHistoryShowCal = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myHistoryShowCal.get"}});
            };
            service.findRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.find"}});
            };
            service.createRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.create"}});
            };
            service.updateRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.update"}});
            };
            service.deleteRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.delete"}});
            };
            service.activeRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.active"}});
            };
            service.inactiveRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.inactive"}});
            };
            service.getMyRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myRepository.get"}});
            };
            service.getSystemRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.systemRepository.get"}});
            };
            service.transferMyRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myRepository.transfer"}});
            };
            service.apiMyRepositoryOutputTemplate = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.my.repository.output.template"}
                });
            };
            service.apiMyRepositoryImport = function (file) {
                var fd = new FormData();
                fd.append("file",file);
                fd.append("method", "api.service.my.repository.import");
                return $http({
                    method : 'POST',
                    url : "/api/FileImport.do",
                    headers: {'Content-Type': undefined },
                    transformRequest: angular.identity,
                    data: fd
                });
            };
            service.sendQuestion = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.question.send"}});
            };
            service.getMyAskHistoryQuestion = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myAskHistoryQuestion.get"}});
            };
            service.getMyWillAnswerQuestion = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myWillAnswerQuestion.get"}});
            };
            service.getMyHistoryMessage = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myHistoryMessage.get"}});
            };
            service.sendAnswer = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.answer.send"}});
            };
            service.closeQuestions = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.questions.close"}});
            };
            service.findComplatint = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.complatint.find"}});
            };
            service.createComplatint = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.complatint.create"}});
            };
            service.updateComplatint = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.complatint.update"}});
            };
            service.deleteComplatint = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.complatint.delete"}});
            };
            service.getComplatint = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.complatint.get"}});
            };
            service.findHistoryQuestion = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.question.history.find"}});
            };
            service.getHistoryMessage = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": " api.service.message.history.get"}});
            };
            return service;
        }])
        .factory('ServiceService', ['$http', function ($http) {
            var service = {};
            var url = "/service/api.do";
            service.createWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.create"}});
            };
            service.updateWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.update"}});
            };
            service.deleteWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.delete"}});
            };
            service.inactiveWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.inactive"}});
            };
            service.activeWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.active"}});
            };
            service.getMyWelComeList = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myWelComeList.get"}});
            };
            service.getMyShowCalWelCome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myShowCalWelCome.get"}});
            };
            service.createServiceUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.serviceUser.create"}});
            };
            service.deleteServiceUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.serviceUser.delete"}});
            };
            service.getMyServiceUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myServiceUser.get"}});
            };
            service.getMyHistoryServiceUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myHistoryServiceUser.get"}});
            };
            service.getMyShowCal = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myShowCal.get"}});
            };
            service.getMyHistoryShowCal = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myHistoryShowCal.get"}});
            };
            service.findRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.find"}});
            };
            service.createRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.create"}});
            };
            service.updateRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.update"}});
            };
            service.deleteRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.delete"}});
            };
            service.activeRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.active"}});
            };
            service.inactiveRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.inactive"}});
            };
            service.getMyRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myRepository.get"}});
            };
            service.transferMyRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myRepository.transfer"}});
            };
            service.apiMyRepositoryOutputTemplate = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.my.repository.output.template"}
                });
            };
            service.apiMyRepositoryImport = function (file) {
                var fd = new FormData();
                fd.append("file",file);
                fd.append("method", "api.service.my.repository.import");
                return $http({
                    method : 'POST',
                    url : "/api/FileImport.do",
                    headers: {'Content-Type': undefined },
                    transformRequest: angular.identity,
                    data: fd
                });
            };
            service.sendQuestion = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.question.send"}});
            };
            service.getMyAskHistoryQuestion = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myAskHistoryQuestion.get"}});
            };
            service.getMyWillAnswerQuestion = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myWillAnswerQuestion.get"}});
            };
            service.getMyHistoryMessage = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myHistoryMessage.get"}});
            };
            service.sendAnswer = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.answer.send"}});
            };
            service.closeQuestions = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.questions.close"}});
            };
            service.findComplatint = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.complatint.find"}});
            };
            service.createComplatint = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.complatint.create"}});
            };
            service.updateComplatint = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.complatint.update"}});
            };
            service.deleteComplatint = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.complatint.delete"}});
            };
            service.getComplatint = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.complatint.get"}});
            };
            return service;
        }])
        .factory('PlatformService', ['$http', function ($http) {
            var service = {};
            var url = "/platform/api.do";
            service.getSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.get"}});
            };
            service.deleteCommentPost = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.comment.post.delete"}
                });
            };
            service.searchSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.search"}});
            };
            service.findSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.find"}});
            };
            service.createSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.create"}});
            };
            service.updateSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.update"}});
            };
            service.deleteSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.delete"}});
            };
            service.findCommentPost = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.comment.post.find"}
                });
            };
            service.updateUserAvatar = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.userAvatar.update"}
                });
            };
            service.searchBySourceType = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.bySourceType.search"}
                });
            };
            service.inactiveUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.user.inactive"}});
            };
            service.activeUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.user.active"}});
            };
            service.createSysUserTag = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sys.user.tag.create"}});
            };
            service.userExistByMobilePhone = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.existByMobilePhone.user"}
                });
            };
            service.login = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.ogin."}});
            };
            service.isResetableLoginPassword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.resetableLoginPassword.is"}
                });
            };
            service.modifyLoginPassword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.loginPassword.modify"}
                });
            };
            service.resetUserLoginPassword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.userLoginPassword.reset"}
                });
            };
            service.createVerificationCode = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.verificationCode.create"}
                });
            };
            service.checkValification = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.valification.check"}
                });
            };
            service.getPassport = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.passport.get"}});
            };
            service.getSettingDiseaseAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingDiseaseAllList.get"}
                });
            };
            service.createSettingDisease = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingDisease.create"}
                });
            };
            service.updateSettingDisease = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingDisease.update"}
                });
            };
            service.deleteSettingDisease = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingDisease.delete"}
                });
            };
            service.inactiveSettingDisease = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingDisease.inactive"}
                });
            };
            service.activeSettingDisease = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingDisease.active"}
                });
            };
            service.getSettingKeywordAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingKeywordAllList.get"}
                });
            };
            service.createSettingKeyword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingKeyword.create"}
                });
            };
            service.updateSettingKeyword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingKeyword.update"}
                });
            };
            service.deleteSettingKeyword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingKeyword.delete"}
                });
            };
            service.createMessage = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.message.create"}
                });
            };
            service.inactiveSettingKeyword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingKeyword.inactive"}
                });
            };
            service.activeSettingKeyword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingKeyword.active"}
                });
            };
            service.getSettingQuestionTagAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingQuestionTagAllList.get"}
                });
            };
            service.createSettingQuestionTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingQuestionTag.create"}
                });
            };
            service.updateSettingQuestionTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingQuestionTag.update"}
                });
            };
            service.deleteSettingQuestionTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingQuestionTag.delete"}
                });
            };
            service.inactiveSettingQuestionTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingQuestionTag.inactive"}
                });
            };
            service.findSettingUserTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingUserTag.find"}
                });
            };
            service.getSettingUserTagAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingUserTagAllList.get"}
                });
            };
            service.createSettingUserTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingUserTag.create"}
                });
            };
            service.updateSettingUserTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingUserTag.update"}
                });
            };
            service.deleteSettingUserTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingUserTag.delete"}
                });
            };
            service.inactiveSettingUserTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingUserTag.inactive"}
                });
            };
            service.activeSettingUserTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingUserTag.active"}
                });
            };
            service.findSysUserCurve = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.sysUserCurve.find"}
                });
            };
            service.getSysUserCurveAllListbyUser = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.sysUserCurveAllListbyUser.get"}
                });
            };
            service.createSysUserCurve = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.sysUserCurve.create"}
                });
            };
            service.deleteSysUserCurve = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.sysUserCurve.delete"}
                });
            };
            service.createIntegralRule = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.integralRule.create"}
                });
            };
            service.updateIntegralRule = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.integralRule.update"}
                });
            };
            service.getIntegralRuleAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.integralRuleAllList.get"}
                });
            };
            service.deleteIntegralRule = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.integralRule.delete"}
                });
            };
            service.createIntegralDetail = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.integralDetail.create"}
                });
            };
            service.findIntegralDetail = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.integralDetail.find"}
                });
            };
            service.getMyIntegralDetail = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.myIntegralDetail.get"}
                });
            };
            service.createSyncSql = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.syncSql.create"}});
            };
            service.getSyncIncrementSql = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.syncIncrementSql.get"}
                });
            };
            return service;
        }])
        .factory('CmsService', ['$http', function ($http) {
            var service = {};
            var url = "/cms/api.do";
            service.findArticle = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.cms.article.find"}});
            };

            service.createArticle = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.cms.article.create"}});
            };
            service.deleteArticle = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.cms.article.delete"}});
            };
            service.getArticle = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.cms.article.get"}});
            };
            service.updateArticle = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.cms.article.update"}});
            };
            service.successArticle = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.cms.article.success"}});
            };
            service.unsuccessArticle = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.cms.article.unsuccess"}});

            };
            service.approveArticle = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.cms.article.approve"}});
            };
            service.cancelArticle = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.cms.article.cancel"}});
            };
            service.changeOrder = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.cms.article.order"}});
            };
            return service;
        }]);

})();
(function () {
    "use strict";
    // 文章首页控制器
    var articleIndexController = function ($scope, dialogService, $modal, toolsService, $location, CmsService) {
        //显示不同的导航NAV的数值
        $scope.$emit('nav', 2);
        //每个导航对应的图标的高亮
        $scope.$emit('navShow', 4);
        $scope.articles = [];
        $scope.vm = {
            pageNumber: 1,
            pageSize: 10,
            totalCount: 0
        };
        //监控userId是否获取
        $scope.$watch(function () {
            return $scope.userId;
        }, function (newValue) {
            if (newValue) {
                $scope.vm.submitUserId=newValue;
                $scope.getList();
            }
        });
        //弹出式日历触发函数
        $scope.openStart = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope.startDate = true;
        };
        $scope.checkboxlist = [
            {key: "save", value: "未发布", state: false, hide: false},
            {key: "submit", value: "已发布", state: false, hide: false},
        ];
        $scope.alreadySubmit = [0, 1];
        $scope.changeStatus = function (status) {
            $scope.selectedStatus = [];
            for (var i = 0; i < status.list.length; i++) {
                $scope.selectedStatus.push(status.list[i].key);
            }
            if (status.list.length == $scope.checkboxlist.length) {
                $scope.alreadySubmit = [0, 1];
            }
            else {
                for (var i = 0; i < $scope.selectedStatus.length; i++) {
                    if ($scope.selectedStatus[i] == "save") {
                        $scope.alreadySubmit = [];
                        $scope.alreadySubmit.push(0);
                    }
                    if ($scope.selectedStatus[i] == "submit") {
                        $scope.alreadySubmit = [];
                        $scope.alreadySubmit.push(1);
                    }
                }
            }
            if (status.list.length == 0) {
                $scope.alreadySubmit = [0, 1];
            }
        };
        $scope.changeOrder=function(article){
            //弹出窗口
            var modalInstance = $modal.open({
                templateUrl: "changeOrder.html",
                size: "sm",
                resolve: {
                    article: function () {
                        return article;
                    }
                },
                controller:ChangeOrderController
            });
            modalInstance.result.then(function () {
                $scope.getList();
            })
        };
        //弹出式日历触发函数
        $scope.openEnd = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope.endDate = true;
        };
        $scope.getList = function () {
            $scope.vm.alreadySubmit = $scope.alreadySubmit;
            if ($scope.vm.startDate instanceof Date) {
                $scope.vm.approveStartTime = $scope.vm.startDate.format("yyyy-MM-dd");
            }
            if ($scope.vm.endDate instanceof Date) {
                $scope.vm.approveEndTime = $scope.vm.endDate.format("yyyy-MM-dd");
            }
            CmsService.findArticle($scope.vm).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    $scope.articles = data.result;
                    $scope.vm.totalCount = data.totalCount;
                }
            });
        };
        $scope.doFind = function () {
            $scope.getList();
        };
        $scope.doDelete = function (article) {
            var dialogDefaults = {
                size: "sm"
            };

            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定删除",
                headerText: "继续....?",
                bodyText: "您确定要删除此帖子吗？",
                callback: function () {
                    CmsService.deleteArticle({id: article.id}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            dialogService.tip([{"message": "删除成功"}], null);
                            $scope.getList();
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };

        //管理所有评论
        $scope.checkComment = function (article) {
            //弹出窗口
            var modalInstance = $modal.open({
                templateUrl: "checkCommentPost.html",
                size: "lg",
                resolve: {
                    article: function () {
                        return article;
                    }
                },
                controller: CheckCommentpostController
            });
            modalInstance.result.then(function () {
                $scope.getList();
            })
        };

        $scope.doSuccess = function (article) {
            var dialogDefaults = {
                size: "sm"
            };

            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定升级",
                headerText: "继续....?",
                bodyText: "您确定要升级为成功案例吗？",
                callback: function () {
                    CmsService.successArticle({id: article.id}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            dialogService.tip([{"message": "升级成功"}], null);
                            $scope.getList();
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
        $scope.doUnSuccess = function (article) {
            var dialogDefaults = {
                size: "sm"
            };

            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定撤销",
                headerText: "继续....?",
                bodyText: "您确定要撤销成功案例吗？",
                callback: function () {
                    CmsService.unsuccessArticle({id: article.id}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            dialogService.tip([{"message": "撤销成功"}], null);
                            $scope.getList();
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
        $scope.approve = function (article) {
            var dialogDefaults = {
                size: "sm"
            };
            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定发布",
                headerText: "继续....?",
                bodyText: "您确定要发布吗？",
                callback: function () {
                    CmsService.approveArticle({id: article.id}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            dialogService.tip([{"message": "发布成功"}], null);
                            //$scope.articles[$scope.articles.indexOf(article)].isApproved=true;
                            $scope.getList();
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
        $scope.create = function () {
            //弹出窗口
            var modalInstance = $modal.open({
                templateUrl: "create.html",
                size: "lg",
                controller: CreateController
            });
            modalInstance.result.then(function (article) {
                $scope.getList();
            })
        };
        $scope.check = function (article) {
            //弹出窗口
            var modalInstance = $modal.open({
                templateUrl: "check.html",
                size: "lg",
                resolve: {
                    article: function () {
                        return article;
                    }
                },
                controller: CheckController
            });
            modalInstance.result.then(function (article1) {
                $scope.articles[$scope.articles.indexOf(article)] = article1;
            })
        };

        $scope.cancel = function (item) {
            var dialogDefaults = {
                size: "sm"
            };
            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定取消发布",
                headerText: "继续....?",
                bodyText: "您确定要取消发布吗？",
                callback: function () {
                    CmsService.cancelArticle({id: item.id}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            dialogService.tip([{"message": "取消成功"}], null);
                            //$scope.articles[$scope.articles.indexOf(article)].isApproved=true;
                            $scope.getList();
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };

        //升级

        //撤销升级
    };
    var CreateController =["$scope", "$modalInstance", "dialogService", "$modal", "toolsService","FoundationService", "$location", "CmsService",
        function ($scope, $modalInstance, dialogService, $modal, toolsService,FoundationService, $location, CmsService) {
        $scope.article={};
        /**
         *图片保存的功能
         */
        $scope.showPicture=function(){
            var fileId=document.getElementById("pictureFile");
            fileId.onchange=function(){
                var fileList = document.getElementById("pictureFile").files;
                var file = fileList[0];
                var fileReader = new FileReader();
                fileReader.readAsDataURL(file);
                //头像上传
                FoundationService.uploadLogo(file).success(function(data){
                    if(data.errors === null || data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                        $scope.article.coverId = data.id;
                        $scope.article.url = data.url;
                    }
                });
            };
        };

        $scope.create = function () {
            $scope.article.categoryId="ARTICLE";
            CmsService.createArticle($scope.article).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    dialogService.tip([{"message": "创建成功！"}],null);
                    $modalInstance.close($scope.article);
                    $modalInstance.dismiss('cancel');
                }
            });

        };

        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    }];
    var CheckController = ["$scope", "$modalInstance", "dialogService", "$modal", "toolsService", "$location", "CmsService","FoundationService","article",function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, CmsService,FoundationService,article) {
        $scope.article={};
        CmsService.getArticle({id:article.id}).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors, null, null);
            } else {
                $scope.article=data.article;
            }
        });
        $scope.showPicture=function(){
            var fileId=document.getElementById("pictureFile");
            fileId.onchange=function(){
                var fileList = document.getElementById("pictureFile").files;
                var file = fileList[0];
                var fileReader = new FileReader();
                fileReader.readAsDataURL(file);
                //头像上传
                FoundationService.uploadLogo(file).success(function(data){
                    if(data.errors === null || data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                        $scope.article.coverId = data.id;
                        $scope.article.avatarurl = data.url;
                    }
                });
            };
        };
        $scope.sure = function () {
            CmsService.updateArticle($scope.article).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    dialogService.tip([{"message": "更新成功！"}],null);
                    $modalInstance.close($scope.article);
                    $modalInstance.dismiss('cancel');
                }
            });

        };

        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    }];
    var ChangeOrderController =["$scope", "$modalInstance", "dialogService", "$modal", "toolsService", "$location", "CmsService","article", function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, CmsService,article) {
        $scope.article={};
        CmsService.getArticle({id:article.id}).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors, null, null);
            } else {
                $scope.article=data.article;
            }
        });
        $scope.sure = function () {
            CmsService.changeOrder($scope.article).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    dialogService.tip([{"message": "更新成功！"}],null);
                    $modalInstance.close();
                    $modalInstance.dismiss('cancel');
                }
            });

        };

        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    }];
    var CheckCommentpostController = function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, PlatformService,article) {
        $scope.comments = [];
        $scope.commentPost = {
            pageNumber: 1,
            pageSize: 10,
            totalCount: 0,
            threadId: article.id
        };
        $scope.getListComment = function () {
            PlatformService.findCommentPost($scope.commentPost).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    $scope.comments = data.result;
                    $scope.commentPost.totalCount=data.totalCount;
                }

            });
        };
        $scope.getListComment();
        $scope.delete = function (comment) {
            PlatformService.deleteCommentPost({id: comment.id}).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    $scope.comments.splice($scope.comments.indexOf(comment), 1);
                    $scope.getListComment();
                }
            });
        };

        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.close();
            $modalInstance.dismiss('cancel');
        };
    };

    angular.module("xn.showcal.cms", [])
        .controller("ArticleIndexController", ["$scope", "dialogService", "$modal", "toolsService", "$location", "CmsService", articleIndexController])
})
();
(function () {
    "use strict";
    // 首页控制器
    var historyIndexController = function ($scope, $sce, $timeout,PlatformService,ShowcalService, dialogService) {
        // 业务逻辑部分
        $scope.endtimes = [
            {id: 0, name: '已过期'},
            {id: 6, name: '6小时内过期'},
            {id: 12, name: '12小时内过期'},
            {id: 24, name: '24小时内过期'}
        ];
        $scope.vm = {
            pageNumber: 1,
            pageSize: 10,
            totalCount: 0
        };
        PlatformService.getSettingUserTagAllList({pageSize:0}).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors);
            } else {
                $scope.usertags = data.result;
            }
        });
        PlatformService.getSettingKeywordAllList({pageSize:0}).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors);
            } else {
                $scope.keywords = data.result;
            }
        });
        $scope.url={};
        $scope.userName={};
        $scope.allQuestion=[];
        $scope.getList=function(){
            ShowcalService.findHistoryQuestion($scope.vm).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.allQuestion = data.maps;
                    console.log(data.maps);
                }
            });
        };
        $scope.getList();
        $scope.query = function(){
            $scope.getList();
        };
        $scope.messages=[];
        $scope.showDialog=function(id,name){
            $scope.vm1 = {
                pageNumber: 1,
                pageSize: 10,
                totalCount: 0,
                showcalId:id
            };
            ShowcalService.getHistoryMessage($scope.vm1).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    console.log(data.result);
                    $scope.messages = data.result;
                    $scope.url=data.url;
                    $scope.userName=data.name;
                    var obj = "";
                    for(var i=0;i<data.result.length;i++) {
                        var createTime="";
                        createTime = moment(Number(data.result[i].creationTime)).format("YYYY-MM-DD") + "\r\n" + moment(Number(data.result[i].creationTime)).format("HH:mm");
                        if(data.result[i].type=="QUESTION"){
                           obj += "<img class='chat-img' src='"+ ($scope.messages[i].avatarurl?"":$scope.messages[i].avatarurl)+"'><span class='ml_10'>"+name+ " "+createTime+"</span>";
                           obj += "<div class='left-message'>"+$scope.messages[i].content+"</div></div><br/><div class='clearfix'></div>"
                       }
                        if(data.result[i].type=="ANSWER"){
                            obj += "<img class='chat-img-1' src='"+ $scope.url+"'><span class='f-right ml_10'>"+$scope.userName+ " "+createTime+"</span>";
                            obj += "<div class='clearfix'></div><div class=' right-message'><div class='arrow-right'></div>"+$scope.messages[i].content+"</div></div><br/><div class='clearfix'></div>"
                        }
                    }
                    $("#ChatContent").html(obj);
                }
            });
        }
        $scope.ChatSend=function(){
            var sendValue=$("textarea[name='ChatValue']").val();
            if(sendValue==null|| $.trim(sendValue)==""){
                dialogService.tip([{message: " 请输入回复信息"}]);
                 return false;
            }
            if($scope.messages.length==0){
                dialogService.tip([{message: " 请选择用户"}]);
                return false;
            }
            var question=[];
            for(var i=0;i<$scope.messages.length;i++){
                if($scope.messages[i].type=="QUESTION"){
                    question.push($scope.messages[i]);
                }
            }
            $scope.questionuserIds=[];
            $scope.questionuserIds.push(question[question.length-1].serviceId);
            $scope.questionuserUsers=[];
            $scope.questionuserUsers.push(question[question.length-1].fromUserId);
            $scope.answer = {};
            $scope.answer.content = sendValue;
            $scope.answer.isAnswered = false;
            $scope.answer.questionIds = $scope.questionuserIds;
            $scope.answer.userIds = $scope.questionusers;
            ShowcalService.sendAnswer($scope.answer).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    var date="";
                    console.log(Date.parse(new Date()));
                     date= moment(Number(Date.parse(new Date()))).format("YYYY-MM-DD") + "\r\n" + moment(Number(Date.parse(new Date()))).format("HH:mm");
                    console.log(date);
                    $("textarea[name='ChatValue']").val("");
                    var value="";
                    value += "<img class='chat-img-1' src='"+ $scope.url+"'><span class='f-right ml_10'>"+$scope.userName+ " "+date+"</span>";
                    value += "<div class='clearfix'></div><div class=' right-message'><div class='arrow-right'></div>"+sendValue+"</div></div><br/><div class='clearfix'></div>"
                    $("#ChatContent").append(value);
                }
            });
        }
    };
    angular.module("xn.showcal.historymsg", [])
        .controller("HistoryMessageIndexController", ["$scope", "$sce", "$timeout", "PlatformService", "ShowcalService", "dialogService", historyIndexController])
})();
(function () {
    "use strict";
    // 首页控制器
    var indexController = function ($scope, $sce, $timeout, PlatformService, ShowcalService, dialogService) {
        $scope.vm = {
            show: "showcal-slip-box-init",
            pageSize: 10,
            pageNumber: 1
        };
        $scope.repositoryParam = {
            pageSize: 0
        }
        $scope.replyquestion = [];
        $scope.questionusers = [];
        $scope.reply = function () {
            // 判断是否勾选
            $scope.keywordIds = [];
            $scope.tageIds = [];
            $scope.questionusers = [];
            $scope.replyquestion = [];
            if ($scope.questions.length > 0) {
                for (var i = 0; i < $scope.questions.length; i++) {
                    if ($scope.questions[i].check) {
                        $scope.replyquestion.push($scope.questions[i].id);
                        $scope.questionusers.push($scope.questions[i].questionUserId);
                        if ($scope.questions[i].keywordId) {
                            $scope.keywordIds.push($scope.questions[i].keywordId);
                        }
                        if ($scope.questions[i].tagId) {
                            $scope.tageIds.push($scope.questions[i].tagId);
                        }

                    }
                }
            }
            if ($scope.replyquestion.length > 0) {
                $scope.vm.show = $scope.vm.show == "showcal-slip-box-enter" ? "showcal-slip-box-leave" : "showcal-slip-box-enter";
            } else {
                dialogService.tip([
                    {"message": "请选择问题，回复！" }
                ]);
            }
            $scope.repositoryParam.keywords = $scope.keywordIds;
            $scope.repositoryParam.tageIds = $scope.tageIds;
            $scope.getRepository();
        }
        /*  $(".showcal-reply").siblings().bind("click",function(){
         $scope.$apply(function(){
         $scope.vm.show="showcal-slip-box-leave";
         });
         })*/
        //点击非当前滑动窗口地方 控制滑动消失 index页面加了一个id=showslide
        $(document).each(function () {
            $(this).bind("click", function () {
                $scope.$apply(function () {
                    $scope.vm.show = "showcal-slip-box-leave";
                });
            });
            $(".showcal-reply").bind("click", function (e) {
                return false;
            })
            $("#showslide").bind("click", function (e) {
                return false;
            })
        });
        //查询消息
        $scope.queryMessageByTag = function (tagId) {
            $scope.vm.isOther = false;
            $scope.vm.isNewUser = false;
            $scope.vm.questionTagId = tagId;
            $scope.vm.keywordId = null;
            $scope.getquestion();
        }
        $scope.doSearch = function () {
            $scope.vm.isOther = false;
            $scope.vm.isNewUser = false;
            $scope.vm.keywordId = null;
            $scope.vm.questionTagId = null;
            $scope.getquestion();
        }
        //查询keyword
        $scope.queryMessageBykeyword = function (keywordId) {
            $scope.vm.keywordId = keywordId;
            $scope.vm.questionTagId = null;
            $scope.vm.isOther = false;
            $scope.vm.isNewUser = false;
            $scope.getquestion();
        }

        $scope.queryOther = function () {
            $scope.vm.isOther = true;
            $scope.vm.isNewUser = false;
            $scope.vm.keywordId = null;
            $scope.vm.questionTagId = null;
            $scope.getquestion();
        }
        $scope.queryNewUser = function () {
            $scope.vm.isNewUser = true;
            $scope.vm.isOther = false;
            $scope.vm.keywordId = null;
            $scope.vm.questionTagId = null;
            $scope.getquestion();
        }
        $scope.selectRepository = function (repository) {
            $scope.markdownValue = repository;
        }
        $scope.send = function () {
            if ($scope.markdownValue == '') {
                dialogService.tip([
                    {"message": "请填写回答问题！" }
                ]);
                return;
            }
            $scope.answer = {};
            $scope.answer.content = $scope.markdownValue;
            $scope.answer.isAnswered = false;
            $scope.answer.questionIds = $scope.replyquestion;
            $scope.answer.userIds = $scope.questionusers;
            ShowcalService.sendAnswer($scope.answer).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.reply();
                    $scope.markdownValue = '';
                    $scope.getquestion();
                }
            });
        }
        $scope.sendandclose = function () {
            if ($scope.markdownValue == '') {
                dialogService.tip([
                    {"message": "请填写回答问题！" }
                ]);
                return;
            }
            $scope.answer = {};
            $scope.answer.content = $scope.markdownValue;
            $scope.answer.isAnswered = true;
            $scope.answer.questionIds = $scope.replyquestion;
            $scope.answer.userIds = $scope.questionusers;
            ShowcalService.sendAnswer($scope.answer).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.reply();
                    $scope.markdownValue = '';
                    $scope.getquestion();
                }
            });
        }
        $scope.all = false;
        $scope.questions = [];
        // 复选框部分
        $scope.allBox = function () {
            $scope.all = !$scope.all;
            if ($scope.questions.length > 0) {
                for (var i = 0; i < $scope.questions.length; i++) {
                    $scope.questions[i].check = $scope.all;
                }
            }
        }

        // 业务逻辑部分
        $scope.endtimes = [
            {id: 0, name: '已过期'},
            {id: 6, name: '6小时内过期'},
            {id: 12, name: '12小时内过期'},
            {id: 24, name: '24小时内过期'}
        ]
        PlatformService.getSettingUserTagAllList({}).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors);
            } else {
                $scope.usertags = data.result;
            }
        });
        $scope.dochangeSelect = function (question) {
            var length = $scope.replyquestion.length;
            for (var i = 0; i < length; i++) {
                var id = $scope.replyquestion[i];
                if (question.id == id) {
                    $scope.replyquestion.splice(i, 1);
                }
            }
            if (question.check) {
                $scope.replyquestion.push(question.id);
            }
            console.log(question.id + question.check);
        }

        //获取所有等待我回答的问题信息
        $scope.getquestion = function () {
            ShowcalService.getMyWillAnswerQuestion($scope.vm).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.newUserQuestionCount = data.newUserQuestionCount;
                    $scope.questionTagList = data.questionTagList;
                    $scope.keyWordTagList = data.keyWordTagList;
                    $scope.totalCount = data.totalCount;
                    $scope.otherQuestionCount = data.otherQuestionCount;
                    $scope.questions = data.result;
                    if ($scope.questions && $scope.questions.length > 0) {
                        var length = $scope.questions.length;
                        for (var i = 0; i < length; i++) {
                            if ($scope.replyquestion.length > 0) {
                                for (var j = 0; j < $scope.replyquestion.length; j++) {
                                    var id = $scope.replyquestion[j];
                                    var question = $scope.questions[i];
                                    if (id == question.id) {
                                        $scope.questions[i].check = true;
                                    }
                                }
                            }
                            var keyword = $scope.questions[i].keyword;
                            if (keyword && keyword.length > 0) {
                                var length = $scope.questions[i].serviceMessages.length;
                                for (var k = 0; k < length; k++) {
                                    var str = $scope.questions[i].serviceMessages[k].content;
                                    $scope.questions[i].serviceMessages[k].content = str.replace(keyword, '<b style="color: #ff0000;">' + keyword + '</b>');
                                }
                            }
                        }
                    }
                }
            });
        }
        $scope.getquestion();
        $scope.dotime = function () {
            $timeout(function () {
                $scope.getquestion();
                $scope.dotime();
            }, 30000);
        }
        $scope.dotime();
        // 查询知识库
        $scope.vm.repositoryKeyword = '';

        $scope.getRepository = function () {
            // 循环根据关键字，标签，读取数据

            ShowcalService.getSystemRepository($scope.repositoryParam).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.sysRepository = data.result;
                }
            });
            ShowcalService.getMyRepository($scope.repositoryParam).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.myRepository = data.result;
                }
            });
        }
        $scope.getRepository();


        $scope.searchrepository = function () {
            $scope.repositoryParam.keywords = [];
            $scope.repositoryParam.tageIds = [];
            $scope.repositoryParam.keyword = $scope.vm.repositoryKeyword;
            $scope.getRepository();
        }

    };
    angular.module("xn.showcal.index", [])
        .controller("IndexController", ["$scope", "$sce", "$timeout", "PlatformService", "ShowcalService", "dialogService", indexController])
})();
/**
 * Created by xiniu on 9/25 0025.
 */
(function () {
    "use strict";
    var app = angular.module("sc.showcal.md", []);
    app.controller("MDIndexController", ["$scope", "$http", "ShowcalService", "dialogService",
        function ($scope, $http, ShowcalService, dialogService) {
            $scope.$emit('navShow', 5);
            //分页传入的数值
            $scope.vm = {
                pageNumber: 1,
                pageSize: 10,
                totalCount: 0
            };
            $scope.pagedResult = [];
            /**
             * 搜索欢迎语
             */
            $scope.getList = function () {

            };
            /**
             * 页面初始化加载数据
             */
            $scope.doSearch = function () {
                $scope.vm.pageNumber = 1;
                $scope.getList();
            };
            $scope.doSearch();
        }
    ]);
})();
/**
 * Created by xiniu on 9/24 0024.
 */
(function () {
    "use strict";
    var app = angular.module("sc.showcal.myuser", []);
        app.controller("MyUserIndexController", ["$scope","$modal", "$http","PlatformService", "ShowcalService", "dialogService",
        function ($scope,$modal, $http,PlatformService, ShowcalService, dialogService) {
            $scope.$emit('navShow', 2);
            //分页传入的数值
            $scope.vm = {
                pageNumber: 1,
                pageSize: 10,
                totalCount:0
            };
            $scope.vmH = {
                pageNumber: 1,
                pageSize: 10,
                totalCount:0
            };
            $scope.sexs = [
                {key:"MALE", value:"男", state:false},
                {key:"FEMALE", value:"女", state:false}
            ];
            $scope.startDate = false;
            $scope.endDate = false;
            //监控userId是否获取
            $scope.passportId={};
            $scope.$watch(function () {
                return $scope.userId;
            }, function (newValue) {
                if (newValue) {
                    $scope.passportId=newValue;
                }
            });
            //弹出式日历触发函数
            $scope.openStartDate = function($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.startDate = true;
            };
            //弹出式日历触发函数
            $scope.openEndDate = function($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.endDate = true;
            };

            // 查询标签
            $scope.usertags = [];
            PlatformService.getSettingUserTagAllList({}).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.usertags = data.result;
                }
            });

            $scope.pagedResult = [];
            /**
             * 搜索欢迎语
             */

            /**
             *  给用户贴标签
             * @param id
             */
            $scope.addTag = function(id){
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "openTag.html",
                    controller:OpenTag,
                    size:"",
                    resolve: {
                        items: function () {
                            return {
                                title: '贴标签',
                                userId: id
                            }
                        }
                    }
                });
                modalInstance.result.then(function (data){
                    window.location.reload();
                });
            };

            /**
             *  获取当前服务对象
             */
            $scope.getList = function () {
                $scope.vm.userTags = [];
                if ($scope.vm.usertag) {
                    $scope.vm.userTags.push($scope.vm.usertag);
                }
                ShowcalService.getMyServiceUser($scope.vm).success(function (data) {
                    if (data.errors && data.errors.length === 0) {
                        $scope.pagedResult = data.result;
                        console.log($scope);
                        $scope.vm.totalCount = data.totalCount;
                        for (var i = 0; i < $scope.pagedResult.length; i++) {
                            $scope.pagedResult[i].check = false;
                        }
                    } else {
                        var msg = "由于以下原因，未能取得数据\n";
                        for (var i = 0; i < data.errors.length; i++) {
                            msg += (i + 1) + "." + data.errors[i].message + "\n";
                        }
                        dialogService.tip([{"message":msg }],null,400);
                    }
                });
            };

            /**
             *  获取历史服务对象
             */
            $scope.getHistoryList = function () {
                $scope.vm.userTags = [];
                if ($scope.vm.usertag) {
                    $scope.vm.userTags.push($scope.vm.usertag);
                }
                ShowcalService.getMyHistoryServiceUser($scope.vm).success(function (data) {
                    if (data.errors && data.errors.length === 0) {
                        $scope.pagedHistoryResult = data.result;
                        console.log($scope);
                        $scope.vmH.totalCount = data.totalCount;
                    } else {
                        var msg = "由于以下原因，未能取得数据\n";
                        for (var i = 0; i < data.errors.length; i++) {
                            msg += (i + 1) + "." + data.errors[i].message + "\n";
                        }
                        dialogService.tip([{"message":msg }],null,400);
                    }
                });
            };

            /**
             * 页面初始化加载数据
             */
            $scope.doSearch = function () {
                $scope.vm.pageNumber = 1;
                if ($scope.vm.startDate instanceof Date) {
                    $scope.vm.startDate = $scope.vm.startDate.format("yyyy-MM-dd");
                }
                if ($scope.vm.endDate instanceof Date) {
                    $scope.vm.endDate = $scope.vm.endDate.format("yyyy-MM-dd");
                }
                if($scope.vm.sexsObj){
                    $scope.vm.sexs = [];
                    for(var j = 0; j < $scope.vm.sexsObj.list.length; j++){
                        $scope.vm.sexs.push($scope.vm.sexsObj.list[j].key);
                    }
                }
                $scope.getList();
                $scope.getHistoryList();
            };
            $scope.doSearch();

            $scope.showcal=function(user){
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "showcaldetail.html",
                    size: "lg",
                    resolve: {
                        user: function () {
                            return user;
                        }
                    },
                    controller: showcalDetailController
                });
                modalInstance.result.then(function () {

                })
            };

            $scope.all = false;
            $scope.allBox = function () {
                $scope.all = !$scope.all;
                if ($scope.pagedResult.length > 0) {
                    for (var i = 0; i < $scope.pagedResult.length; i++) {
                        $scope.pagedResult[i].check = $scope.all;
                    }
                }
            };
            $scope.changeBox = function (index) {
                $scope.pagedResult[index].check = !$scope.pagedResult[index].check;
            };

            /**
             * 帖子推送弹框
             */
            $scope.pushArticle = function () {
                $scope.userIds = [];
                for (var i = 0; i < $scope.pagedResult.length; i++) {
                    if ($scope.pagedResult[i].check) {
                        $scope.userIds.push($scope.pagedResult[i].id);
                    }
                }
                if ($scope.userIds.length == 0) {
                    dialogService.tip([{"message": "请选择需要推送帖子的用户！"}], null);
                    return false;
                }
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "choose.html",
                    size: "lg",
                    resolve: {
                        userIds: function () {
                            return $scope.userIds;
                        },
                        userId: function () {
                            return $scope.passportId;
                        },
                    },
                    controller: ChooseController
                });
                modalInstance.result.then(function () {

                })
            };
            /**
             * 系统消息
             */
            $scope.sendMessage = function () {
                $scope.userIds = [];
                for (var i = 0; i < $scope.pagedResult.length; i++) {
                    if ($scope.pagedResult[i].check) {
                        $scope.userIds.push($scope.pagedResult[i].id);
                    }
                }
                if ($scope.userIds.length == 0) {
                    dialogService.tip([{"message": "请选择用户！"}], null);
                    return false;
                }
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "send.html",
                    size: "lg",
                    resolve: {
                        userIds: function () {
                            return $scope.userIds;
                        }
                    },
                    controller: SendController
                });
                modalInstance.result.then(function () {

                })
            };
        }
    ]);

    /**
     * 贴标签维护弹出框控制器
     * @author zxl
     * @type {*[]}
     */
    var OpenTag = ["$scope","$modalInstance","items","dialogService","PlatformService","FoundationService", function ($scope,$modalInstance,items,dialogService,PlatformService,FoundationService) {
        $scope.window = {};
        $scope.window.title = items.title;

        $scope.cancel = function () {
            $scope.window = {};
            $modalInstance.dismiss('cancel');
        };

        $scope.usertags = [];
        PlatformService.getSettingUserTagAllList({}).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors);
            } else {
                $scope.usertags = data.result;
            }
        });

        $scope.vm = {

        };

        // 贴标签
        $scope.doTag = function(){
            $scope.vm.userId = items.userId;
            $scope.vm.userTagId = $scope.vm.usertag;

            PlatformService.createSysUserTag($scope.vm).success(function(data){
                if (data.errors == null || data.errors.length > 0){
                    dialogService.tip(data.errors);
                }
                else {
                    dialogService.tip([{message: "禁言成功"}]);
                    //关闭
                    $modalInstance.close($scope.window);
                    //清空数据
                    $scope.window={};
                }
            });
        };

    }];

    //创建用户
    app.controller("UserManagerCreateController", ["$scope", "$http", "PlatformService","FoundationService", "dialogService",
        function ($scope, $http, PlatformService,FoundationService,dialogService) {
            $scope.user = {sex: 'MALE'};
            $scope.userTypes = [
                {name: '普通用户', id: 'USER'},
                {name: '瘦咖', id: 'SHOWCAL'},
                {name: '平台管理员', id: 'PLADMIN'}
            ];
            //弹出式日历触发函数
            $scope.openData = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.openedDate = true;
            };
            /**
             *图片保存的功能
             */
            $scope.showPicture=function(){
                var fileId=document.getElementById("pictureFile");
                fileId.onchange=function(){
                    var fileList = document.getElementById("pictureFile").files;
                    var file = fileList[0];
                    var fileReader = new FileReader();
                    fileReader.readAsDataURL(file);
                    //头像上传
                    FoundationService.uploadLogo(file).success(function(data){
                        if(data.errors === null || data.errors.length > 0){
                            dialogService.tip(data.errors);
                        }else{
                            $scope.user.avatarurl = data.url;
                            $scope.user.avatarId = data.id;
                        }
                    });
                };
            };


            $scope.doSave = function () {
                console.log($scope.user);
                if($scope.user.birthday instanceof  Date){
                    $scope.user.birthday = $scope.user.birthday.format('yyyy-MM-dd');
                }
                PlatformService.createSysUser($scope.user).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([{"message":"用户创建成功！" }],"/platform/daily/usermanager");
                    }
                })
            }
        }
    ]);

    var showcalDetailController =["$scope","$modalInstance","dialogService","$modal","toolsService","$location", "PlatformService", "user",function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, PlatformService, user) {

        console.log(user);
        $scope.vm = {
            pageNumber: 1,
            pageSize: 10,
            totalCount: 0
        };
        $scope.user =  user
        var param = {
            userId:$scope.user.id,
            type:'WEIGHT'
        }
        $scope.firstWeight = 0;
        PlatformService.findSysUserCurve(param).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors);
            } else {
                $scope.weights = data.result;
                if(data.result.length > 0){
                    $scope.firstWeight = data.result[0];
                }
                $scope.weighttotalCount = data.totalCount;
            }
        })

        $scope.vm.color="color-gray"
        $scope.weightshow=function(){
            $scope.weight=true;
            $scope.back=false;
            $scope.hip=false;
            $scope.cal=false;
            $scope.sporttime=false;
            $scope.sportconsume=false;
            if($scope.weight){
                $scope.vm.color="color-gray"
                $scope.vm.color1="";
                $scope.vm.color2="";
                $scope.vm.color3="";
                $scope.vm.color4="";
                $scope.vm.color5=""
            }
            // 查询数据
            var param = {
                userId:$scope.user.id,
                type:'WEIGHT'
            }
            PlatformService.findSysUserCurve(param).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.weights = data.result;
                    $scope.weighttotalCount = data.totalCount;
                }
            })
        };

        $scope.backshow=function(){
            $scope.weight=false;
            $scope.back=true;
            $scope.hip=false;
            $scope.cal=false;
            $scope.sporttime=false;
            $scope.sportconsume=false;
            if($scope.back){
                $scope.vm.color1="color-gray";
                $scope.vm.color="";
                $scope.vm.color2="";
                $scope.vm.color3="";
                $scope.vm.color4="";
                $scope.vm.color5=""
            }
            var param = {
                userId:$scope.user.id,
                type:'WAISTLINE'
            }
            PlatformService.findSysUserCurve(param).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.waistlines = data.result;
                    $scope.waistlineCount = data.totalCount;
                }
            })
        };

        $scope.hipshow=function(){
            $scope.weight=false;
            $scope.back=false;
            $scope.hip=true;
            $scope.cal=false;
            $scope.sporttime=false;
            $scope.sportconsume=false;
            if($scope.hip){
                $scope.vm.color2="color-gray";
                $scope.vm.color="";
                $scope.vm.color1="";
                $scope.vm.color3="";
                $scope.vm.color4="";
                $scope.vm.color5=""
            }
            var param = {
                userId:$scope.user.id,
                type:'HIPLINE'
            }
            PlatformService.findSysUserCurve(param).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.hiplines  = data.result;
                    $scope.hiplineCount = data.totalCount;
                }
            })
        };
        $scope.calshow=function(){
            $scope.weight=false;
            $scope.back=false;
            $scope.hip=false;
            $scope.cal=true;
            $scope.sporttime=false;
            $scope.sportconsume=false;
            if($scope.cal){
                $scope.vm.color3="color-gray";
                $scope.vm.color="";
                $scope.vm.color1="";
                $scope.vm.color2="";
                $scope.vm.color4="";
                $scope.vm.color5=""
            }
        };
        $scope.sporttimeshow=function(){
            $scope.weight=false;
            $scope.back=false;
            $scope.hip=false;
            $scope.cal=false;
            $scope.sporttime=true;
            $scope.sportconsume=false;
            if($scope.sporttime){
                $scope.vm.color4="color-gray";
                $scope.vm.color="";
                $scope.vm.color1="";
                $scope.vm.color2="";
                $scope.vm.color3="";
                $scope.vm.color5=""
            }
        };
        $scope.sportconsumeshow=function(){
            $scope.weight=false;
            $scope.back=false;
            $scope.hip=false;
            $scope.cal=false;
            $scope.sporttime=false;
            $scope.sportconsume=true;
            if($scope.sportconsume){
                $scope.vm.color5="color-gray";
                $scope.vm.color="";
                $scope.vm.color1="";
                $scope.vm.color2="";
                $scope.vm.color3="";
                $scope.vm.color4=""

            }
        };


        /*    PlatformService.findSysUser({id:userId}).success(function (data) {
         if (data.errors === null || data.errors.length > 0) {
         dialogService.tip(data.errors, null, null);
         } else {

         }
         });*/
        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    }];

    /**
     * 贴标签维护弹出框控制器
     * @author zxl
     * @type {*[]}
     */
    var ChooseController = ["$scope","$modalInstance","dialogService","$modal","toolsService","$location", "CmsService", "PlatformService", "userIds","userId", function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, CmsService, PlatformService, userIds,userId) {
        $scope.articles = [];
        console.log(userIds);
        $scope.vm1 = {
            pageNumber: 1,
            pageSize: 10,
            totalCount: 0,
            submitUserId:userId
        };
        $scope.getAllArticle = function () {
            CmsService.findArticle($scope.vm1).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    $scope.articles = data.result;
                    $scope.vm1.totalCount = data.totalCount;
                    for (var i = 0; i < $scope.articles.length; i++) {
                        $scope.articles[i].check = false;
                    }
                }
            })
        };
        $scope.getAllArticle();
        $scope.doFind = function () {
            $scope.getAllArticle();
        };
        $scope.allArticle = false;
        $scope.allArticleBox = function () {
            $scope.allArticle = !$scope.allArticle;
            if ($scope.articles.length > 0) {
                for (var i = 0; i < $scope.articles.length; i++) {
                    $scope.articles[i].check = $scope.allArticle;
                }
            }
        };
        $scope.changeArticleBox = function (index) {
            $scope.articles[index].check = !$scope.articles[index].check;
        };
        $scope.create = function () {
            $scope.articleIds = [];
            for (var i = 0; i < $scope.articles.length; i++) {
                if ($scope.articles[i].check) {
                    $scope.articleIds.push($scope.articles[i].id);
                }
            }
            if ($scope.articleIds.length == 0) {
                $scope.validateForm.$errors.push("请选择需要推送的帖子");
                return false;
            }
            $scope.pushArticles = [];
            for (var i = 0; i < userIds.length; i++) {
                for (var j = 0; j< $scope.articleIds.length; j++) {
                    $scope.pushArticle = {
                        businessType: "ARTICLE",
                        businessId: $scope.articleIds[j],
                        receiptId: userIds[i]
                    };
                    $scope.pushArticles.push($scope.pushArticle);
                }
            }
            $scope.message = {
                sysMessageCreateRequestList: $scope.pushArticles
            };
            PlatformService.createMessage($scope.message).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    dialogService.tip([{"message": "推送成功！"}], null);
                    $modalInstance.close();
                    $modalInstance.dismiss('cancel');
                }
            });

        };

        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };

    }];

    var SendController = ["$scope","$modalInstance","dialogService","$modal","toolsService","$location", "CmsService", "PlatformService", "userIds",function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, PlatformService, userIds) {
        $scope.content;
        $scope.title;
        console.log(userIds);
        $scope.userIdss = [];
        $scope.send = function () {

            if($scope.content.length>15){
                $scope.title= $scope.content.substring(0,15);
            }
            else{
                $scope.title= $scope.content;
            }
            for (var i = 0; i < userIds.length; i++) {
                $scope.sendMessage = {
                    businessType: "SYSTEM",
                    receiptId: userIds[i],
                    messageTitle: $scope.title,
                    messageContent: $scope.content
                };
                $scope.sendMessages.push( $scope.sendMessage);
            }

            $scope.message = {
                sysMessageCreateRequestList: $scope.sendMessages
            };
            PlatformService.createMessage($scope.message).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    dialogService.tip([{"message": "消息发送成功！"}], null);
                    $modalInstance.close();
                    $modalInstance.dismiss('cancel');
                }
            });

        };

        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    }];
})();
/**
 * Created by xiniu on 9/22 0022.
 */
(function () {
    "use strict";
    var app = angular.module("sc.showcal.repository", []);
    app.controller("RepositoryIndexController", ["$scope", "$http", "$modal" , "ShowcalService", "PlatformService", "dialogService",
        function ($scope, $http, $modal, ShowcalService, PlatformService, dialogService) {
            $scope.$emit('navShow', 3);
            $scope.vm = {
                pageNumber: 1,
                pageSize: 10
            };

            $scope.startDate = false;
            $scope.endDate = false;

            //弹出式日历触发函数
            $scope.openStartDate = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.startDate = true;
            };
            //弹出式日历触发函数
            $scope.openEndDate = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.endDate = true;
            };

            var thisParameter = {};
            PlatformService.getSettingQuestionTagAllList(thisParameter).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.questionTagList = data.result;
                    for (var i = 0; i < $scope.questionTagList.length; i++) {
                        if($scope.repository){
                            if ($scope.questionTagList[i].id == $scope.repository.id) {
                                $scope.questionTagList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
            });
            PlatformService.getSettingKeywordAllList(thisParameter).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.keywordList = data.result;
                    for (var i = 0; i < $scope.keywordList.length; i++) {
                        if($scope.repository){
                            if ($scope.keywordList[i].id == $scope.repository.id) {
                                $scope.keywordList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
            });

            /**
             * 搜索用户列表
             */
            $scope.getList = function () {
                $scope.vm.tageIds = [];
                $scope.vm.keywords = [];
                if($scope.vm.tagObj){
                    $scope.vm.tageIds.push($scope.vm.tagObj);
                }
                if($scope.vm.keywordObj){
                    $scope.vm.keywords.push($scope.vm.keywordObj);
                }
                ShowcalService.getSystemRepository($scope.vm).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        $scope.sysRepository = data.result;
                        $scope.sysTotalCount = data.totalCount;
                    }
                });
                ShowcalService.getMyRepository($scope.vm).success(function (data) {
                    if (data.errors && data.errors.length === 0) {
                        $scope.myRepository = data.result;
                        $scope.mytotalCount = data.totalCount;
                    } else {
                        var msg = "由于以下原因，未能取得数据\n";
                        for (var i = 0; i < data.errors.length; i++) {
                            msg += (i + 1) + "." + data.errors[i].message + "\n";
                        }
                        dialogService.tip(msg);
                    }
                });
            };
            /**
             * 页面初始化加载数据
             */
            $scope.doSearch = function () {
                $scope.vm.pageNumber = 1;

                if ($scope.vm.startDate instanceof Date) {
                    $scope.vm.startDate = $scope.vm.startDate.format("yyyy-MM-dd");
                }
                if ($scope.vm.endDate instanceof Date) {
                    $scope.vm.endDate = $scope.vm.endDate.format("yyyy-MM-dd");
                }

                $scope.getList();
            };
            $scope.doSearch();

            //新增
            $scope.addRepository = function (repository) {
                $scope.repository = {};
                //复制
                angular.extend($scope.repository, repository);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "repositoryEidt.html",
                    controller: TreeEidt,
                    size: "",
                    resolve: {
                        items: function () {
                            return $scope.repository;
                        }
                    }
                });
            };

            //编辑
            $scope.edit = function (repository) {
                $scope.repository = {};
                //复制
                angular.extend($scope.repository, repository);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "repositoryEidt.html",
                    controller: TreeEidt,
                    size: "",
                    resolve: {
                        items: function () {
                            return $scope.repository;
                        }
                    }
                });
                modalInstance.result.then(function (data) {
                    window.location.reload();
                });
            };

            //删除
            $scope.delete = function (repository) {
                var dialogDefaults = {
                    size: "sm"
                };
                var dialogOptions = {
                    closeButtonText: "取消",
                    actionButtonText: "确定删除",
                    headerText: "温馨提示",
                    bodyText: "您确定要删除这条知识吗？",
                    type: "delete",
                    callback: function () {
                        ShowcalService.deleteRepository({id: repository.id}).success(function (data) {
                            if (data.errors === null || data.errors.length > 0) {
                                dialogService.tip(data.errors);
                            } else {
                                dialogService.tip([
                                    {"message": "删除成功！" }
                                ]);
                                window.location.reload();
                            }
                        });
                    }
                };
                dialogService.confirm(dialogDefaults, dialogOptions);
            };

            // 发布
            $scope.active = function(repository){
                ShowcalService.activeRepository({id:repository.id}).success(function(data){
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([
                            {"message": "发布成功！" }
                        ],"index.htm");
                    }
                });
            };

            // 取消发布
            $scope.inactive = function(repository){
                ShowcalService.inactiveRepository({id:repository.id}).success(function(data){
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([
                            {"message": "取消发布成功！" }
                        ],"index.htm");
                    }
                });
            };

            var TreeEidt = ["$scope", "$modalInstance", "items", "ServiceService", "PlatformService", "dialogService",
                function ($scope, $modalInstance, items, ServiceService, PlatformService, dialogService) {
                    $scope.$emit('navShow', 1);
                    $scope.repository = items;
                    // $scope.repository.title = "新增知识库";

                    var thisParameter = {};
                    PlatformService.getSettingQuestionTagAllList(thisParameter).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            $scope.questionTagList = data.result;
                            for (var i = 0; i < $scope.questionTagList.length; i++) {
                                if($scope.repository){
                                    if ($scope.questionTagList[i].id == $scope.repository.id) {
                                        $scope.questionTagList.splice(i, 1);
                                        break;
                                    }
                                }
                            }
                        }
                    });
                    PlatformService.getSettingKeywordAllList(thisParameter).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            $scope.keywordList = data.result;
                            for (var i = 0; i < $scope.keywordList.length; i++) {
                                if($scope.repository){
                                    if ($scope.keywordList[i].id == $scope.repository.id) {
                                        $scope.keywordList.splice(i, 1);
                                        break;
                                    }
                                }
                            }
                        }
                    });

                    $scope.doSave = function () {
                        $scope.repository.type = "SHOWCAL";
                        if ($scope.repository.id == null) {

                            //新建
                            ServiceService.createRepository($scope.repository).success(function (data) {
                                if (data.errors === null ||
                                    data.errors.length > 0) {
                                    dialogService.tip(data.errors);
                                } else {
                                    //返回id
                                    $scope.repository.id = data.id;
                                    dialogService.tip([
                                        {"message": "保存成功！"}
                                    ]);
                                    //关闭
                                    $modalInstance.close($scope.repository);
                                    //清空数据
                                    $scope.repository = {};
                                    window.location.reload();
                                }
                            });
                        } else {
                            //编辑
                            ServiceService.updateRepository($scope.repository).success(function (data) {

                                if (data.errors === null || data.errors.length > 0) {
                                    dialogService.tip(data.errors);
                                } else {
                                    dialogService.tip([
                                        {"message": "保存成功！"}
                                    ]);
                                    //关闭
                                    $modalInstance.close($scope.repository);
                                    //清空数据
                                    $scope.repository = {};
                                }
                            });
                        }
                    };

                    $scope.clean = function () {
                        $scope.disease = {};
                        $modalInstance.dismiss('cancel');
                    };
                }
            ];
        }
    ]);

    // 批量导入数据
    app.controller("MyRepositoryImportController", ["$scope", "$http","$modal", "ServiceService", "dialogService",
        function ($scope, $http, $modal, ServiceService, dialogService) {
            $scope.$emit('navShow', 1);
            $scope.errorOpen = function (errors,url) {
                $scope.result={};
                $scope.result.errors=errors;
                $scope.result.url=url;
                var modalInstance = $modal.open({
                    templateUrl: "errors.html",
                    controller: ErrorCtrl,
                    resolve: {
                        items: function () {
                            return  $scope.result;
                        }
                    }
                });
                modalInstance.result.then(function () {
                }, function () {
                });
            };
            $scope.upFileClick=function(){
                var upImportFileId=document.getElementById("upImportFileId");
                upImportFileId.onchange=function(){
                    var upImportFile;
                    var upImportFileList =upImportFileId.files;
                    var upImportFilename;
                    if(upImportFileList){
                        upImportFile = upImportFileList[0];
                        upImportFilename=upImportFile.name;
                    }else{
                        upImportFilename =upImportFileId.value;
                    }
                    var str =upImportFilename.substr(upImportFilename.indexOf(".")+1);
                    if(!(str=="xls" || str=="xlsx" || str=="et")){
                        $("#upImportFile").val("");
                        dialogService.tip([{"message":"请上传Excel支持的文件(xls,xlsx,et等)！" }]);
                    }else{
                        $("#upImportFile").val(upImportFilename);
                    }
                };

            };
            // 上传
            $scope.upFileSave=function(){
                var file = document.getElementById("upImportFileId").files[0];
                console.log(file);
                if(!file){
                    dialogService.tip([{"message": "请上传文件！"}]);
                    return;
                }
                ServiceService.apiMyRepositoryImport(file).success(function(data){
                    if(data.errors == null || data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                        dialogService.tip([{"message": "导入成功！"}]);
                    }
                });
            };

            // 下载模版
            $scope.downloadTemplate=function(){
                ServiceService.apiMyRepositoryOutputTemplate().success(function(data){
                    if(data.errors == null || data.errors.length > 0){
                        //$scope.errorOpen(data.errors,data.url);
                    }else{
                        window.open(data.url,"_self");
                    }
                });
            };
        }]);

    var ErrorCtrl =["$scope","$modalInstance","items",
        function ($scope, $modalInstance,items) {
            $scope.errors=items.errors;
            $scope.url=items.url;
            $scope.download=function(){
                window.open($scope.url,"_self");
                $modalInstance.dismiss('cancel');
            };
            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
            //关闭错误
            $scope.closeAlert = function (index,form) {
                form.splice(index,1);
            };
        }];

})();
/**
 * Created by xiniu on 9/24 0024.
 */
(function () {
    "use strict";
    var app = angular.module("sc.showcal.welcome", []);
    app.controller("WelcomeIndexController", ["$scope", "$http","$modal", "ShowcalService", "dialogService",
        function ($scope, $http,$modal, ShowcalService, dialogService) {
            $scope.$emit('navShow', 6);
            //分页传入的数值
            $scope.vm = {
                pageNumber: 1,
                pageSize: 10,
                totalCount:0
            };
            $scope.pagedResult = [];
            /**
             * 搜索欢迎语
             */
            $scope.getList = function () {
                ShowcalService.getMyWelComeList({}).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        $scope.welcomes = data.result;
                        $scope.vm.totalCount = data.totalCount;
                    }
                });
            };
            /**
             * 页面初始化加载数据
             */
            $scope.doSearch = function () {
                $scope.vm.pageNumber = 1;
                $scope.getList();
            };
            $scope.doSearch();

            /**
             *  新建欢迎语
             *
             */
            $scope.createWelcome = function(){
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "openCreate.html",
                    controller:OpenCreate,
                    size:"",
                    resolve: {
                        items: function () {
                            return {
                                title: '新建欢迎语'
                            }
                        }
                    }
                });
                modalInstance.result.then(function (data){
                    window.location.reload();
                });
            };

            /**
             *  新建欢迎语
             *
             */
            $scope.doEdit = function(id){
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "openEdit.html",
                    controller:OpenEdit,
                    size:"",
                    resolve: {
                        items: function () {
                            return {
                                title: '修改欢迎语',
                                id:id
                            }
                        }
                    }
                });
                modalInstance.result.then(function (data){
                    window.location.reload();
                });
            };

            $scope.doActive = function(id){
                ShowcalService.activeWelcome({id:id}).success(function(data){
                    if (data.errors == null || data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }
                    else {
                        dialogService.tip([{message: "默认成功"}]);
                        window.location.reload();
                    }
                });
            };

            // 删除
            $scope.doDelete = function(id){
                ShowcalService.deleteWelcome({id:id}).success(function(data){
                    if (data.errors == null || data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }
                    else {
                        dialogService.tip([{message: "删除成功"}]);
                        window.location.reload();
                    }
                });
            };
        }
    ]);

    /**
     * 新建欢迎语维护弹出框控制器
     * @author zxl
     * @type {*[]}
     */
    var OpenCreate = ["$scope","$modalInstance","items","dialogService","PlatformService","FoundationService","ShowcalService", function ($scope,$modalInstance,items,dialogService,PlatformService,FoundationService,ShowcalService) {
        $scope.window = {};
        $scope.window.title = items.title;

        $scope.cancel = function () {
            $scope.window = {};
            $modalInstance.dismiss('cancel');
        };

        $scope.vm = {

        };

        // 保存
        $scope.doSave = function(){
            ShowcalService.createWelcome($scope.vm).success(function(data){
                if (data.errors == null || data.errors.length > 0){
                    dialogService.tip(data.errors);
                }
                else {
                    dialogService.tip([{message: "创建成功"}]);
                    //关闭
                    $modalInstance.close($scope.window);
                    //清空数据
                    $scope.window={};
                }
            });
        };
    }];

    /**
     * 修改欢迎语维护弹出框控制器
     * @author zxl
     * @type {*[]}
     */
    var OpenEdit = ["$scope","$modalInstance","items","dialogService","PlatformService","FoundationService","ShowcalService", function ($scope,$modalInstance,items,dialogService,PlatformService,FoundationService,ShowcalService) {
        $scope.window = {};
        $scope.window.title = items.title;

        $scope.cancel = function () {
            $scope.window = {};
            $modalInstance.dismiss('cancel');
        };

        $scope.vm = {

        };

        //根据id获取会员信息
        ShowcalService.getWelcome({id:items.id}).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors);
            } else {
                $scope.vm = data.welcome;
            }
        });

        // 保存修改
        $scope.doSave = function(){
            ShowcalService.updateWelcome($scope.vm).success(function(data){
                if (data.errors == null || data.errors.length > 0){
                    dialogService.tip(data.errors);
                }
                else {
                    dialogService.tip([{message: "创建成功"}]);
                    //关闭
                    $modalInstance.close($scope.window);
                    //清空数据
                    $scope.window={};
                }
            });
        };
    }];


    //创建用户
    app.controller("UserManagerCreateController", ["$scope", "$http", "PlatformService","FoundationService", "dialogService",
        function ($scope, $http, PlatformService,FoundationService,dialogService) {
            $scope.user = {sex: 'MALE'};
            $scope.userTypes = [
                {name: '普通用户', id: 'USER'},
                {name: '瘦咖', id: 'SHOWCAL'},
                {name: '平台管理员', id: 'PLADMIN'}
            ];
            //弹出式日历触发函数
            $scope.openData = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.openedDate = true;
            };
            /**
             *图片保存的功能
             */
            $scope.showPicture=function(){
                var fileId=document.getElementById("pictureFile");
                fileId.onchange=function(){
                    var fileList = document.getElementById("pictureFile").files;
                    var file = fileList[0];
                    var fileReader = new FileReader();
                    fileReader.readAsDataURL(file);
                    //头像上传
                    FoundationService.uploadLogo(file).success(function(data){
                        if(data.errors === null || data.errors.length > 0){
                            dialogService.tip(data.errors);
                        }else{
                            $scope.user.avatarurl = data.url;
                            $scope.user.avatarId = data.id;
                        }
                    });
                };
            };


            $scope.doSave = function () {
                console.log($scope.user);
                if($scope.user.birthday instanceof  Date){
                    $scope.user.birthday = $scope.user.birthday.format('yyyy-MM-dd');
                }
                PlatformService.createSysUser($scope.user).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([{"message":"用户创建成功！" }],"/platform/daily/usermanager");
                    }
                })
            }
        }
    ]);
    app.controller("IntroduceIndexController", ["$scope", "$http", "CmsService","FoundationService", "dialogService",
        function ($scope, $http, CmsService,FoundationService, dialogService) {
            $scope.$emit('navShow', 6);
            $scope.article={};
            $scope.$watch(function () {
                return $scope.userId;
            }, function (newValue) {
                if (newValue) {
                    $scope.getList();
                }
            });

            $scope.vm = {
                pageNumber: 1,
                pageSize: 0,

                categoryId:"INTRODUCTION",
                totalCount:0
            };
            $scope.getList = function () {
                $scope.vm.submitUserId=$scope.userId;
                CmsService.findArticle($scope.vm).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors, null, null);
                    } else {
                        if(data.result.length>0) {
                            $scope.article = data.result[0];
                            $scope.vm.totalCount = data.totalCount;
                        }
                    }
                });
            };
            $scope.showPicture=function(){
                var fileId=document.getElementById("pictureFile");
                fileId.onchange=function(){
                    var fileList = document.getElementById("pictureFile").files;
                    var file = fileList[0];
                    var fileReader = new FileReader();
                    fileReader.readAsDataURL(file);
                    //头像上传
                    FoundationService.uploadLogo(file).success(function(data){
                        if(data.errors === null || data.errors.length > 0){
                            dialogService.tip(data.errors);
                        }else{
                            $scope.article.coverId = data.id;
                            $scope.article.avatarurl = data.url;
                        }
                    });
                };
            };
            $scope.doSave = function () {
                $scope.article.categoryId="INTRODUCTION";
                CmsService.createArticle($scope.article).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors, null, null);
                    } else {
                        dialogService.tip([{"message": "创建成功！"}],null);
                        $scope.getList();
                    }
                });
            };
            $scope.update = function () {
                CmsService.updateArticle($scope.article).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors, null, null);
                    } else {
                        dialogService.tip([{"message": "更新成功！"}],null);
                        $scope.getList();
                    }
                });
            }
        }
    ]);
})();